from datetime import datetime
import csv
import json
from os import remove

if(__name__!='__main__'):
  from ..models import Enrollment, Student, Course, db

IGNORE_COLUMNS=['Gender','Address_1','Address_2','BirthDay',""]

#HELPER METHODS_________________________________________________________________________
# Helper method to print dictionary generated by Text_to_dictionary_list
def pretty_print(input_file):
  list_of_dictionaries=text_to_dictionary_list(input_file)
  # print(json.dumps(list_of_dictionaries,sort_keys=True,indent=4))
  for dict in list_of_dictionaries:
    print (dict['Course']+"\n")

def remove_duplicates(list, dup_pk, dup_pk2=None, dup_pk3=None):
  memo=set()
  result=[]
  for item in list:
    if item[dup_pk] not in memo:
      result.append(item)
      memo.add(item[dup_pk])

  return result
# pretty_print("indepProject\inputFiles\courseData.txt")

#HELPER METHODS_________________________________________________________________________
# Function to extract data from an input file and save in a list of dictionaries
def text_to_dictionary_list(input_file):
  subject_list=[]
  with open(input_file,'r', newline='') as subjects:
    subject_reader=csv.DictReader(subjects,delimiter="\t")
    for subject in subject_reader:
      # remove personal information
      anonymized_subject={key:val for key, val in subject.items() if key not in IGNORE_COLUMNS}
      subject_list.append(anonymized_subject)
  return subject_list

# Function to insert a record into the student table
def insert_student(student_id,name,email=None,program=None,campus=None,start_date=None):
  record=Student(name=name, student_id=student_id,email=email,program=program,campus=campus,start_date=start_date)
  db.session.add(record)
  db.session.commit()

# Function to insert a record into the course table
def insert_course(course_id,section,title,credit_hours):
  record=Course(course_id=course_id, section=section, title=title, credit_hours=credit_hours)
  db.session.add(record)
  db.session.commit()

# Function to insert a record into the enrollment table
def insert_enrollment(course_id,student_id,term,grade):
  record=Enrollment(course_id=course_id, student_id=student_id, term=term, grade=grade)
  db.session.add(record)
  db.session.commit()

# Function to upload all 3 data files sotred in specified directory
# def upload_all_files():
#   upload_course_data()
#   upload_transfer_data()
#   upload_person_data()

# Function to extract and upload course_data.txt to database
def upload_course_data(input_file):
  course_list=text_to_dictionary_list(input_file)

  # remove duplicates based on course_id
  no_dups=remove_duplicates(course_list,"Course")
  for course in no_dups:
    insert_course(course["Course"],course["Section"],course["Title"], course["Credit_Hrs"])

#Function to extract and upload person_data.txt to database
def upload_person_data(input_file):
  student_list=text_to_dictionary_list(input_file)
  for student in student_list:
    insert_student(student["Student_ID"],student["Fname-Lname"],student["Email"], student["Program"], student["Campus"], student["Start_Date"])

# Function to build enrollments
def build_enrollments(input_file):
  course_list=text_to_dictionary_list(input_file)
  memo=set()
  no_dups=[]
  for course in course_list:
    if (course["Course"]+","+course["Student_ID"]+","+course["Section"] not in memo):
      no_dups.append(course)
      memo.add(course["Course"]+","+course["Student_ID"]+","+course["Section"])

  for enrollment in no_dups:
    insert_enrollment(enrollment["Course"],enrollment["Student_ID"],enrollment["Term"],enrollment["Grade"])    


# # Function to extract and upload transfer_data.txt to database
# def upload_transfer_data(input_file):
#   enrollment_list=text_to_dictionary_list(input_file)

#   for enrollment in enrollment_list:
#     insert_enrollment(enrollment["Course"],enrollment["Student_ID"],enrollment["Section"],enrollment["Grade"])